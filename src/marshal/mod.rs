pub mod common;
pub mod decode;

use std::io;
use super::objects::{Code, ObjectContent, ObjectRef, ObjectStore};
use self::common::Object as MarshalObject;
use self::common::Code as MarshalCode;


pub fn read_object<R: io::Read>(reader: &mut R, store: &mut ObjectStore) -> Result<ObjectRef, decode::UnmarshalError> {
    decode::read_object(reader, store, &mut Vec::new())
}

#[test]
#[ignore]
fn test_module() {
    let mut bytes: &[u8] = b"\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00@\x00\x00\x00s\x10\x00\x00\x00d\x00\x00d\x01\x00\x84\x00\x00Z\x00\x00d\x02\x00S)\x03c\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00C\x00\x00\x00s\x1e\x00\x00\x00t\x00\x00j\x01\x00|\x00\x00\x83\x01\x00\x01t\x00\x00j\x01\x00d\x01\x00\x83\x01\x00\x01d\x00\x00S)\x02N\xda\x01\n)\x02Z\x0e__primitives__Z\x0cwrite_stdout)\x01\xda\x05value\xa9\x00r\x03\x00\x00\x00\xfa\x15pythonlib/builtins.py\xda\x05print\x01\x00\x00\x00s\x04\x00\x00\x00\x00\x01\r\x01r\x05\x00\x00\x00N)\x01r\x05\x00\x00\x00r\x03\x00\x00\x00r\x03\x00\x00\x00r\x03\x00\x00\x00r\x04\x00\x00\x00\xda\x08<module>\x01\x00\x00\x00s\x00\x00\x00\x00";
    let mut store = ObjectStore::new();
    let res = read_object(&mut bytes, &mut store).unwrap();
    println!("{:?} {:?}", res, store);
}
